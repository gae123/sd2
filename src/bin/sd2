#!/usr/bin/env python
#############################################################################
# Copyright (c) 2017 SiteWare Corp. All right reserved
#############################################################################

import argparse
import logging
import os
import signal
import sys
import time
import sd2
import json
import datetime
import daemon
import daemon.pidfile

from sd2.rsync_connections import RsyncConnections
from sd2.docker_connections import DockerConnections

ON_POSIX = 'posix' in sys.builtin_module_names

g_workspaces = []
g_args = None

g_pidfile = '/var/run/sd2/sd2.pid'
g_logfile = '/var/log/sd2/sd2.log'

################################################################################

class RestartEcxeption(Exception):
    pass

def signalHandler(signum, arg2):
    logging.info("SIGH {}".format(signum))
    if (signum == signal.SIGUSR1 and RsyncConnections.singleton):
        RsyncConnections.singleton.wake()
    if (signum == signal.SIGUSR2 and DockerConnections.singleton):
        DockerConnections.singleton.wake()
signal.signal(signal.SIGUSR1, signalHandler)
signal.signal(signal.SIGUSR2, signalHandler)

def init():
    logging.info("SD2INIT:EE")
    global g_workspaces
    if g_args.showschema:
        print(sd2.sd2_config_schema)
        sys.exit(0)
    config_dct = sd2.read_config()
    if g_args.showconfig:
        ss = json.dumps(config_dct, indent=4)
        print(ss)
        sys.exit(0)
    sd2.myhosts.init(config_dct)
    sd2.gen_all.gen_all()

    # if not g_args.nointf:
    #     for host in sd2.myhosts.get_hosts():
    #         if not host.get('containers'):
    #             continue
    #         sd2.gen_interfaces.gen_interfaces(host['name'])

    g_workspaces = config_dct['workspaces']
    # Normalize that host can be just a string
    for ws in g_workspaces:
        hosts = ws.get('targets', [])
        for ii, host in enumerate(hosts):
            if isinstance(host, basestring):
                host = {'name': host}
                hosts[ii] = host
    return config_dct


g_ssh_connections = None
RsyncConnections.singleton = None
DockerConnections.singleton = None

def main():
    from sd2.fswatch_connections import FSWatcher
    from sd2.host_connections import HostConnections
    fswatchers = host_connections = None
    try:
        config_dct = init()
        host_connections = HostConnections(g_args, g_workspaces)

        g_ssh_connections.init(g_args)
        fswatchers = FSWatcher(g_args, g_workspaces)
        if (not config_dct.get('config')):
            raise EnvironmentError("config section of configuration is missing")
        rsynCheckPeriod = config_dct["config"]["RsynCheckPeriodInSeconds"]
        RsyncConnections.singleton = RsyncConnections(g_args, g_workspaces,rsynCheckPeriod)
        dockerCheckPeriod = config_dct["config"]["DockerCheckPeriodInSeconds"]
        DockerConnections.singleton = DockerConnections(g_args, g_workspaces, dockerCheckPeriod)

        last_time = datetime.datetime.now()
        while True:
            now = datetime.datetime.now()
            if config_dct["config"]["HaltOnSuspendResume"]:
                if now - last_time > datetime.timedelta(seconds=60):
                    raise Exception("Timedelta too long: %s", now - last_time)
            last_time = now
            if sd2.has_timestamp_changed(config_dct):
                raise RestartEcxeption()
            host_connections.poll()
            g_ssh_connections.poll()
            fswatchers.poll()
            RsyncConnections.singleton.poll()
            DockerConnections.singleton.poll()
            time.sleep(.1)
    except Exception as ex:
        logging.warning("MAIN:LOOP:EX {} {}".format(type(ex), ex))
        raise ex
    finally:
        if g_ssh_connections:
            g_ssh_connections.shutdown()
        if fswatchers:
            fswatchers.shutdown()
        if RsyncConnections.singleton:
            RsyncConnections.singleton.shutdown()
        if DockerConnections.singleton:
            DockerConnections.singleton.shutdown()


def sd2_daemon(g_args):
    init()
    if os.path.isfile(g_pidfile):
        print("Exiting because sd2 is already running...")
        sys.exit(0)
    os.system("sudo mkdir -p /var/run/sd2")
    os.system("sudo chmod 777 /var/run/sd2")
    stdout = open("/var/run/sd2/sd2.stdout", 'w')
    stderr = open("/var/run/sd2/sd2.stderr", 'w')
    print("Starting sd2 as daemon, use 'sd2 halt' to stop it, 'sd2 logs' to view its logs")
    with daemon.DaemonContext(
        stdout=stdout,
        stderr=stderr,
        pidfile=daemon.pidfile.PIDLockFile(g_pidfile)
        ):
        setup_logging()
        from sd2.ssh_connections import SSHConnections
        global g_ssh_connections
        g_ssh_connections = SSHConnections(g_args)
        while True:
            try:
                main()
            except RestartEcxeption:
                continue

def add_argument_parsing(subparsers):
    parser_run = subparsers.add_parser(
        'run',
        description="Run the daemon"
    )
    parser_run.add_argument('--nossh', '-s', action="store_true",
                            default=False,
                            help="use ssh in rsync")
    parser_run.add_argument("hosts", nargs="*",
                            help="host to sync, leave it empty to include all hosts",
                            default='')
    parser_run.set_defaults(func=sd2_daemon, logging=True)



def add_stop_argument_parsing(subparsers):
    def sd2_stop_daemon(g_args, exit_after=True):
        if os.path.isfile(g_pidfile):
            rr = os.system("kill `cat {}`".format(g_pidfile))
        else:
            print("sd2 does not appear to be running")
            rr = 0
        if exit_after:
            sys.exit(rr)
    def sd2_restart_daemon(g_args):
        sd2_stop_daemon(g_args, exit_after=False)
        logging.info(sys.argv[0])
        rr = os.system(sys.argv[0])
        sys.exit(rr)
    parser_run = subparsers.add_parser(
        'halt',
        description="Stop the daemon"
    )
    parser_run.set_defaults(func=sd2_stop_daemon, logging=False)
    parser_run = subparsers.add_parser(
        'restart',
        description="Restart the daemon"
    )
    parser_run.set_defaults(func=sd2_restart_daemon, logging=False)

def add_wake_argument_parsing(subparsers, cmdname, signame):
    def sd2_wake_activity(g_args):
        if os.path.isfile(g_pidfile):
            os.system("kill -s {} `cat {}`".format(signame, g_pidfile))
        else:
            print("sd2 does not appear to be running")

    parser_run = subparsers.add_parser(
        cmdname,
        description="Immediately start the {} tasks".format(cmdname)
    )
    parser_run.set_defaults(func=sd2_wake_activity, logging=False)


def add_logs_argument_parsing(subparsers):
    def sd2_logs(g_args):
        print("Logs are in " + g_logfile)
        os.system("tail -f {}".format(g_logfile))
        sys.exit(0)

    parser_run = subparsers.add_parser(
        'logs',
        description="Show the logs file location"
    )
    parser_run.set_defaults(func=sd2_logs, logging=False)

def setup_logging():
    import logging.handlers
    global g_args

    logDir = '/var/log/sd2'
    os.system("sudo mkdir -p '{}'".format(logDir))
    os.system("sudo chmod 777 '{}'".format(logDir))
    fileName = 'sd2'
    logFilePath = "{0}/{1}.log".format(logDir, fileName)
    # if (os.path.exists(logFilePath)):
    #     timestamp = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    #     os.system("mv {} {}".format(
    #         logFilePath, logFilePath.replace('.log', '-{}.log'.format(timestamp))))

    level = {
     'info': logging.INFO,
     'debug': logging.DEBUG,
     'error': logging.ERROR,
     'warning': logging.WARNING
    }[g_args.level]

    logFormatter = logging.Formatter(
        '%(asctime)s %(process)d %(levelname)-8s %(message)s', '%Y-%m-%d %H:%M:%S')
    rootLogger = logging.getLogger()

    # reset
    map(rootLogger.removeHandler, list(rootLogger.handlers[:]))
    map(rootLogger.removeFilter, list(rootLogger.filters[:]))

    rootLogger.setLevel(logging.DEBUG)

    fileHandler = logging.handlers.TimedRotatingFileHandler(
                                logFilePath, when='D', backupCount=60)
    fileHandler.setFormatter(logFormatter)
    fileHandler.setLevel(level)
    rootLogger.addHandler(fileHandler)

    # consoleHandler = logging.StreamHandler()
    # consoleHandler.setFormatter(logFormatter)
    # consoleHandler.setLevel(level)
    # rootLogger.addHandler(consoleHandler)

intro = '''The tool will parse the configuration files ending
in config.yaml in {} and will run as
a daemon.
Env variables that affect defaults:
SD2_CONFIG_DIR to look for the configuration files in another directory not ~/.sd2,
SD2_ETC_HOSTS to output /etc/hosts in a different directory, useful for testing,
SD2_SSH_CONFIG tou output ~/.ssh/config in a differente directory useful for testing
'''

def parse_arguments():
    global g_args
    parser = argparse.ArgumentParser(
        description=intro.format(
            os.getenv('SD2_CONFIG_DIR', os.path.join(os.getenv('HOME'), '.sd2')))
    )
    parser.add_argument('--version', '-v', action="store_true", default=False)
    parser.add_argument('--level', '-l', default='debug',
                        help="Pass debug,info or error to set the debug level logged")
    parser.add_argument('--dryrun', '-n', action="store_true", default=False)
    parser.add_argument('--showschema', action="store_true", default=False,
                        help="Just show the JSON schema of the configuration file and exit")
    parser.add_argument('--showconfig', action="store_true", default=False,
                        help="Just show config and exit")

    subparsers = parser.add_subparsers()

    sd2.gen_all.add_argument_parsing(subparsers)
    sd2.sd2cont.add_argument_parsing(subparsers)
    add_argument_parsing(subparsers)
    add_stop_argument_parsing(subparsers)
    add_logs_argument_parsing(subparsers)
    add_wake_argument_parsing(subparsers, 'rsync', signal.SIGUSR1)
    add_wake_argument_parsing(subparsers, 'docker', signal.SIGUSR2)

    # Add 'run' as the default argument if it is missing. This is hacky but
    # the best I can think of right now.
    found = False
    for arg in sys.argv:
        if arg in ['cont', 'init', 'run', 'halt', 'logs', 'restart', 'rsync', 'docker']:
            found = True
    if not found:
        sys.argv.append('run')

    g_args = parser.parse_args(sys.argv[1:])
    if g_args.logging:
        setup_logging()

    sd2.sd2cont.check_for_prereqs()

    if g_args.version:
        print(sd2.__version__)
        sys.exit(0)

    logging.info("---------------sd2 %s-------------------", sys.argv)

    g_args.func(g_args)

parse_arguments()




